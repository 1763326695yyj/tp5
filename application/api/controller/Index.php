<?php
namespace app\api\controller;
header('Content-Type: application/json;charset=utf-8');
//header('Access-Control-Allow-Origin:*'); // *代表允许任何网址请求
//header('Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'); // 允许请求的类型
//header('Access-Control-Allow-Credentials: true'); // 设置是否允许发送 cookies
//header('Access-Control-Allow-Headers: Content-Type,Content-Length,Accept-Encoding,X-Requested-with, Origin'); // 设置允许自定义请求头的字段
use app\api\model\Apptoken;
use app\api\model\Client;
use app\api\Model\Goods as goodsModel;
use think\Db;
use think\Exception;
use think\facade\Cache;

//1 对照原数据库写api
//2 没有返回空值，修改数据库
class Index extends Base
{
    public $goods;
    public $client;
    public $apptoken;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->goods = new goodsModel();
        $this->client = new Client();
        $this->apptoken = new Apptoken();

    }


    public function index(){
        return $this->fetch();
    }

    /**
     * goodsid , userid
     * return 单个商品信息
     */
    public function goods_find()
    {
        if (is_array($rqu = $this->text('post',['goodsid','token','uid'],2)) ||empty($rqu)){
            return $goodsArr = $this->goods->findOne($rqu['goodsid']);
        }else{
            return $rqu;
        }
    }

    public function goods_add(){
       if (is_array($rqu = $this->text('post',['token','uid'],1)) ||empty($rqu)){
           return $this->goods->add($rqu);
       }else{
           return $rqu;
       }
    }
    public function goods_update(){
        if (is_array($rqu = $this->text('post',['token','uid','id'],1)) ||empty($rqu)){

            return $this->goods->updates($rqu);
        }else{
            return $rqu;
        }
    }
    public function login(){

        if (is_array($rqu =  $this->text('post',['username','pwd'])) ||empty($rqu)){
            return $this->client->NamePwdFind($rqu);
        }else{
            return $rqu;
        }
    }
    public function get_token(){
        $param = $this->request->param();
        if (!empty($param['appid'] && !empty($param['appsecret']) )){
            $token_data = $this->apptoken->create_token($param['appid'],$param['appsecret']);
                return ret(['apptoken'=>$token_data['app_token']]);
        }else{
            return ret('未获得开发者权限',1201);
        }
    }
    /**
     * 验证是否登录，参数
     * type : post get
     * arr: 所需要的参数名
     * user:1为校验参数中用户ID是否登录 2 为校验并获取用户信息
     */
    public function text($type,$arr,$user=''){
        if ($type == 'post'){
            $req=$this->requset_post($arr);
        }else{
            $req=$this->requset_get($arr);
        }
        if ($req){
            if (empty($req['app_token'])){
                return ret('apptoken验证失败',1101);
            }else {
                $check_token = $this->check_token($req['app_token']);
                if (is_string($check_token)) {
                    if (!empty($user)) {
                        try {
                            if (!empty($req['token']) && !empty($req['uid'])) {
                                if ($user == 2) {
                                    $type = 1;
                                } else {
                                    $type = '';
                                }
                                $token_json = $this->client->tokenFind($req['token'],$req['uid'], $type);
//                        return ret(is_array($token_json));
                                if (is_array($token_json) || is_bool($token_json)) {
                                    //验证成功
                                    if ($user == 1) {
                                        return $req;
                                    } elseif ($user == 2) {
                                        $req['userinfo'] = $token_json;
                                        return $req;
                                    } else {
                                        return ret('接口异常', 1001);
                                    }
//                    return ret($token_json);
                                } else {
                                    return $token_json;
                                }
                            } else {
                                return ret('usertoken验证失败', 2001);
                            }

                        } catch (Exception $e) {
                            return ret($e->getMessage(), 1005);
                        }
                    } else {
                        return $req;
                    }
                }else{
                    return $check_token;
                }
                }
        }else{
           return ret('参数验证失败',1004);
        }
    }



}
