<?php


namespace app\api\controller;


use app\api\model\Attr;
use app\api\model\AttrText;
use app\api\model\Log;
use think\Controller;
use app\api\Model\Goods as goodsModel;
use think\facade\Cache;

class Goods extends Base
{
    public  $goodsModel;
    public  $attrText;
    public  $attrModel;
    public  $logModel;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->goodsModel = new goodsModel();
        $this->attrText = new AttrText();
        $this->attrModel = new Attr();
        $this->logModel = new Log();
    }

    /**
     * 商品列表
     */
    public function goods_list()
    {
        $param = $this->request->param();
        if (!empty($param['text_id']) && is_array($param['text_id'])){
            //根据属性值ID查找商品
            $text_goods_id = $this->attrText->goodsTextFind($param['text_id']);
            if (!empty($text_goods_id)){
                return $this->goodsModel->goodsList($param['where']??'',$text_goods_id);
            }
        }
             $list =  $this->goodsModel->goodsList($param['where']??'',$param['id']??'');
            return $list;
    }
    /**
     * 商品添加/修改
     * type: update 修改 create 添加
     */
    public function goods_save(){
        $param = $this->request->param();
        if (array_key_exists('goodsData',$param) && array_key_exists('type',$param)) {
            if ($param['type'] == 'update'){
                return $this->goodsModel->goodsEdit($param['goodsData']);
            }elseif ($param['type'] == 'create'){
                return  $this->goodsModel->goodsAdd($param['goodsData']);
            }else{
                return ret('参数错误',1004);
            }

        }else{
            return ret('参数错误',1004);
        }

    }


    /**
     * 属性值添加
     */
    public function text_add(){
        $param = $this->request->param();
        if (array_key_exists('attr_id',$param) && array_key_exists('text_name',$param)){
           return $this->attrText->add($param);
        }else{
            return ret('参数错误',1004);
        }
    }
    /**
     * 查询当前属性下所有属性值
     */
    public function text_find(){
        $param = $this->request->param();
        if (array_key_exists('attr_id',$param) ){
         return $this->attrModel->AttrTextFind($param['attr_id']);
        }else{
            return ret('参数错误',1004);
        }
    }

    /**
     * 属性添加
     * @return \think\response\Json
     */
    public function attr_add(){
        $param = $this->request->param();
        if (array_key_exists('attr_name',$param)){
            return $this->attrModel->add($param);
        }else{
            return ret('参数错误',1004);
        }
    }

    /**
     * @return mixed
     * 单字段数量变化（int）
     */
    public function int_change(){
        $param = $this->request->param();
        $id = $param['id']??0;
        $key = $param['key']??'';
        $value = $param['value']??0;
        $type = $param['type']??'dec';
        $force = $param['force']??0;
        return $this->goodsModel->int_change($id,$key,$value,$type,$force);
    }
    /**
     * @return \think\response\Json
     * 查找缓存数组
     * arr_name 对应数组名称
     */
    public function cache_arr_find(){
        $param = $this->request->param();
        $arr_name = [
            '属性' => 'attr_arr',
            '单位' => 'unit_arr',
        ];
//        Cache::rm('unit_arr');
        if (!empty($param['arr_name']) && !empty($arr_name[$param['arr_name']])){
            return ret(Cache::get($arr_name[$param['arr_name']]));
        }else{
            return ret('参数错误',1004);
        }
    }








    public function test(){
        $value['crud'] = 'c';
        $value['table_name'] = 'wk_goods';
        $value['table_id'] = '30,31,32';
        $value['user_id'] = 1;
        $value['user_name'] = "管理员";
//        $value['']
       return $this->logModel->createLog($value);
//        $goods = [
//            'text_id' => [1,3,5]
//        ];
//        return json($goods);
//        $param = file_get_contents('php://input');
//        $param = str_replace(array("\r\n", "\r", "\n","\t") ,"", $param);
//        $param = json_decode(json_encode($param),true);
//        dump($param);

    }


}