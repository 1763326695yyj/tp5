<?php


namespace app\api\model;



use think\Db;
use think\Exception;
use think\Model;
use think\Validate;

class House extends Model
{
    public $rule;
    public $msg;
    public $table = HOUSE;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->rule = [
            'name' => 'require|max:500',
            'address' => 'require|max:800',
            'tel' => 'require',
            'subarea' => 'require',
            'plece_info' => 'require',
        ];
        $this->msg = [
            'name.require' => '仓库名称必填',
            'name.max' => '仓库名称过长',
            'address.require' => '仓库地址必填',
            'address.max' => '仓库地址过长',
            'tel.require' => '仓库电话必填',
            'subarea.require' => '仓库分区数量必填',
            'plece_info.require' => '仓库分区信息必填',
        ];
    }
    public function houseList($where,$id=0,$subarea=1){
        try {
        if ($id != 0){
            $wheres[] = ['id','in',$id];
        }
        $wheres[] = ['id','>',0];
            $wherePost = explode('--', $where);
            //where条件拼接
            if (!empty($where)) {
                for ($i = 0; $i < count($wherePost); $i++) {
                    $whereArr = explode('|', $wherePost[$i]);
                    if (count($whereArr) < 3) {
                        return ['data' => '参数错误', 'code' => 1004];
                    }
                    if ($whereArr[1] == 'like') {
                        $whereArr[2] = '%' . $whereArr[2] . '%';
                    }
                    $wheres[] = [$whereArr[0], $whereArr[1], $whereArr[2]];
                }
            }
            $houseArr = $this->where($wheres)->select();
//            return ['data'=>$houseArr,'code'=>0];
            foreach ($houseArr as $key => $v) {
                $houseArr[$key]['create_time'] = date('Y-m-d H:i:s', $v['create_time']);
                $houseArr[$key]['save_time'] = date('Y-m-d H:i:s', $v['save_time']);
                if ($subarea == 1) {
                    $houseArr[$key]['subarea_info'] = $this->subarea_list([['house_id', '=', $v['id']]]);
                }
            }
            return ['data' => $houseArr, 'code' => 0];
        }catch (Exception $e){
            return ['data' => $e->getMessage(),'code' => 1005];
        }
    }
    public function houseAdd($houseData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($houseData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            }
            $data = [
                'name' => $houseData['name'],
                'address' => $houseData['address'],
                'tel' => $houseData['tel'],
                'subarea' => $houseData['subarea'],
                'create_time' => time(),
                'save_time' => time(),
                'is_del' => $houseData['is_del']??1,
                'compel_type' => $houseData['compel_type']??2
            ];
            $this->allowField(true)->save($data);
            if ($this->id){
             $req =  $this->housePleceAdd($this->id,$houseData['plece_info'],$houseData['subarea']);
                if($req['code'] == 0) {
                    $this->commit();
                    return ['data' => $this->id, 'code' => 0];
                }else{
                    return $req;
                }
            }

        }catch (Exception $e){
            $this->rollback();
            return ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    public function houseEdit($houseData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($houseData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            }
            if (empty(House::get($houseData['id']))){
                return ['data' => '参数错误', 'code' => 1004];
            }
            $data = [
                'name' => $houseData['name'],
                'address' => $houseData['address'],
                'tel' => $houseData['tel'],
                'subarea' => $houseData['subarea'],
                'save_time' => time(),
                'is_del' => $houseData['is_del']??1,
                'compel_type' => $houseData['compel_type']??2
            ];
            $this->allowField(true)->save($data,['id'=>$houseData['id']]);
            //行列不能修改
            $req =  $this->housePleceAdd($houseData['id'],$houseData['plece_info'],$houseData['subarea']);
            if($req['code'] == 0) {
                 $this->commit();
                return ['data' => $houseData['id'], 'code' => 0];
            }else{
                return $req;
            }

        }catch (Exception $e){
            $this->rollback();
            return ['data'=>$e->getMessage(),'code'=>1005];
        }
    }


    public function housePleceAdd($house_id,$plece_info,$plece_num){
        $wheres[] = ['house_id','=',$house_id];
        $this->table(HOUSE_PLECE)->where($wheres)->delete();

        if (count($plece_info) == $plece_num){
            for($i=1;$i<=count($plece_info);$i++){
                $rc = $this->row_col($i,$house_id,$plece_info[$i-1]['row'],$plece_info[$i-1]['col']);
                $rec[] = $rc;
                if ($rc['code'] == 0){
                    $success[]  = $i ;
               }else{
                    $error[] = $i;
                }
            }
//            return ['data' => $rec, 'code' => 01];
            if (empty($error)) {
                return ['data' => '操作成功', 'code' => 0];
            }else{
                return ['data' => '参数错误', 'code' => 1004];
            }
        }else{
            return ['data'=>'参数错误','code'=>1004];
        }
    }

    /**
     * @param $num
     * @param $house_id
     * @param $row
     * @param $col
     * @return array
     * 分区行列添加
     */
    public function row_col($num,$house_id,$row,$col){
            try {
                $req = [];
                for ($i = 1; $i <= $row; $i++) {
                    for ($j = 1; $j <= $col; $j++) {
                        $wheres[] = ['house_id','=',$house_id];
                        $wheres[] = ['num','=',$num];
                        $wheres[] = ['row','=',$i];
                        $wheres[] = ['col','=',$j];
                        $wheres[] = ['type','=',1];
                        $h_p = $this->table(BILL_HOUSE_GOODS)->where($wheres)->find();

                        if (!empty($h_p) ){
                            //格中有商品
                            $employ =2;
//                         $employs[] = $h_p['employ_type'];
                        }
                            $req[] = [
                                'house_id' => $house_id,
                                'num' => $num,
                                'row' => $i,
                                'col' => $j,
                                'employ_type' => $employ??1,
                            ];
                        unset($wheres);
                        unset($hp);
                        unset($employ);
                    }
                }
                $whereDel[] = ['house_id','=',$house_id];
                $whereDel[] = ['num','=',$num];

//               $this->table(HOUSE_PLECE)->where($whereDel)->delete();
                $bool = $this->table(HOUSE_PLECE)->insertAll($req);



                if ($bool) {
                    return ['data' => '操作成功', 'code' => 0];
                } else {
                    return ['data' => '参数错误', 'code' => 1004];
                }
            }catch (Exception $e){
                return ['data'=>$e->getMessage(),'code'=>1005];
            }
        }

    /**
     * @param $wheres
     * @return array|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 分区查询
     */
    public function subarea_list($wheres){
        $whereE[] = ['employ_type','=',2];
        $whereNE[] = ['employ_type','=',1];
        $plece = $this->table(HOUSE_PLECE)->where($wheres)->select();
        $plece['employ'] = $this->table(HOUSE_PLECE)->where($wheres)->where($whereE)->count();
        $plece['no_employ'] = $this->table(HOUSE_PLECE)->where($wheres)->where($whereNE)->count();
        return $plece;
    }

    /**
     * @param $goods_id
     * @param $house_id
     * @param int $type
     * @param int $num
     * @param int $row
     * @param int $col
     * @param  $bill_sn
     * @param  $goods_num
     * @return array
     * 出/入库商品-仓库关系添加（按位置）
     */
    public function BillGoodsHouseAdd($goods_id,$house_id,$bill_sn,$type,$goods_num,$num,$row,$col){
        if (empty($row) || empty($col) || empty($num)){
            return $this->BillGoodsHouseAddFast($goods_id, $house_id, $bill_sn, $type,$goods_num,$num ?? '');
        }
        $this->startTrans();
       try{
           $house = House::get($house_id);
           if (!empty($house)) {
               $compel = $house['compel_type'];
               $wheres[] = ['house_id','=',$house['id']];
               $wheres[] = ['num','=',$num];
               $wheres[] = ['row','=',$row];
               $wheres[] = ['col','=',$col];
               $plece = $this->table(HOUSE_PLECE)->where($wheres)->find();
//               return  $plece;
               if (!empty($plece)){
                   if ($plece['employ_type'] == 1){
                       //空闲
                        $success = 1;
                   }elseif ($plece['employ_type'] == 2){
                       //被占
                       if ($compel == 2){
                           //不强制
                           return  ['data'=>'该区域已被占用','code'=>6001];
                       }elseif ($compel == 1){
                           //强制
                           $success = 1;
                       }
                   }
               }
               if (!empty($success) && $success == 1){
                   return $this->put_out_house_goods($type,$goods_num,$house_id,$goods_id,$num,$row,$col,$bill_sn);
               }
           }
           return  ['data'=>'参数错误','code'=>1004];
       }catch (Exception $e){
           $this->rollback();
           return  ['data'=>$e->getMessage(),'code'=>1005];
       }
    }

    /**
     * @param $type
     * @param $goods_num
     * @param $house_id
     * @param $goods_id
     * @param $num
     * @param $row
     * @param $col
     * @param $bill_sn
     * @return array
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * 出/入库商品-仓库关系添加操作
     */
    public function put_out_house_goods($type,$goods_num,$house_id,$goods_id,$num,$row,$col,$bill_sn){
        $where_hg_link[] =['goods_id','=',$goods_id];
        $where_hg_link[] =['house_id','=',$house_id];
        $house_goods = $this->table(HOUSE_GOODS_LINK)->where($where_hg_link)->find();
        if ($type == 2){
            if (!empty($house_goods)){
                if ($house_goods['num'] >= $goods_num && $house_goods['num'] > 0){
                    $insertData = ['goods_id'=>$goods_id,'house_id'=>$house_id,'create_time'=>time(),'num'=>$num,'row'=>$row,'col'=>$col,'bill_sn'=>$bill_sn,'type'=>2,'goods_num'=>$goods_num];
                    $this->table(BILL_HOUSE_GOODS)->insert($insertData);
                    $this->table(HOUSE_GOODS_LINK)->where($where_hg_link)->setDec('num',$goods_num);
                    $this->commit();
                    return ['code'=>0 , 'data'=>'出库成功'];
                }else{
                    return  ['data'=>'该仓库商品库存不足','code'=>6004];
                }
            }else{
                return  ['data'=>'该区域商品不存在','code'=>6003];
            }
        }elseif ($type == 1){
            if (empty($house_goods)){
                $this->table(HOUSE_GOODS_LINK)->insert(['goods_id'=>$goods_id,'house_id'=>$house_id,'num'=>0]);
            }
            $insertData = ['goods_id'=>$goods_id,'house_id'=>$house_id,'create_time'=>time(),'num'=>$num,'row'=>$row,'col'=>$col,'bill_sn'=>$bill_sn,'type'=>1,'goods_num'=>$goods_num];
            $this->table(BILL_HOUSE_GOODS)->insert($insertData);
            $this->table(HOUSE_GOODS_LINK)->where($where_hg_link)->setInc('num',$goods_num);
            $this->commit();
            return ['code'=>0,'data'=>'入库成功'];
        }
        return ['code'=>1004,'参数错误'];
    }
    /**
     * @param $goods_id
     * @param $house_id
     * @param $bill_sn
     * @param $goods_num
     * @param $num
     * @param $type
     * 出/入库商品-仓库关系添加 快捷
     */
    public function BillGoodsHouseAddFast($goods_id,$house_id,$bill_sn,$type,$goods_num,$num=''){
//        $this->startTrans();
        try{
            $house = House::get($house_id);
            if (!empty($house)) {
                $wheres[] =  ['house_id','=',$house_id];
                $whereBe[] =  ['employ_type','=',1];
                if(!empty($num))$wheres[] = ['num','=',$num];
                $plece = $this->table(HOUSE_PLECE)->where($wheres)->where($whereBe)->select();
                if (empty($plece[0]??'')){
                    if($house['compel_type'] == 2){
                        //不强制
                        return ['data'=>'该仓库已满','code'=>6002];
                    }elseif ($house['compel_type'] == 1){
                        $plece = $this->table(HOUSE_PLECE)->where($wheres)->select();
                    }
                }
                //随机分配区域
                $is = rand(0,count($plece)-1);
                $req = $this->put_out_house_goods($type,$goods_num,$house_id,$goods_id,$num??1,$plece[$is]['row'],$plece[$is]['col'],$bill_sn);
                if (!empty($req)){
                    return $req;
                }
            }
            return ['data'=>'参数错误','code'=>1004];
        }catch (Exception $ee){
//            $this->rollback();
            return ['data'=>$ee->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $house_id
     * @param int $num
     * @param int $row
     * @param int $col
     * @param int $goods_id
     * @return array
     * 查询BILL_HOUSE_GOODS相关信息
     */
    public function pleceGoodsSelect($house_id=0,$goods_id=0,$num=0,$row=0,$col=0){
        if (!empty($num))$wheres[] = ['num','=',$num];
        if (!empty($row))$wheres[] = ['row','=',$row];
        if (!empty($col))$wheres[] = ['col','=',$col];
        if (!empty($goods_id))$wheres[] = ['goods_id','=',$goods_id];
        if (!empty($house_id)) $wheres[] = ['house_id','=',$house_id];
        if (empty($wheres))$wheres[] = ['house_id',">",0];
        $pgArr = $this->table(BILL_HOUSE_GOODS)->where($wheres)->select();
        if (!empty($pgArr)){
            foreach ($pgArr as $key=>$v) {
                $pgArr[$key]['create_time'] = date('Y-m-d H:i:s', $v['create_time']);
                if ($v['type'] == 2){
                    $pgArr[$key]['del_time'] = date('Y-m-d H:i:s', $v['del_time']);
                 }
                switch ($v['type']){
                    case 1 :
                        $pgArr[$key]['type'] = '入库';
                        break;
                    case 2 :
                        $pgArr[$key]['type'] = '出库';
                        break;
                }
            }
            return ['code'=>0 , 'data'=>$pgArr];
        }else{
            return ['code'=>6004,'data'=>'当前位置下没有信息'];
        }
    }

    /**
     * @param $wheres
     * @return bool
     * @throws Exception
     * @throws \think\exception\PDOException
     * BILL_HOUSE_GOODS表按条件删除
     */
    public function pleceGoodsDel($wheres){
        $this->table(BILL_HOUSE_GOODS)->where($wheres)->delete();
        return true;
    }
}