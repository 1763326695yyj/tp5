<?php


namespace app\api\model;


use think\Exception;
use think\facade\Cache;
use think\Model;

class Attr extends Model
{
    protected $table = 'wk_attr';
    public $attr_arr;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->attr_arr = Cache::get('attr_arr');
    }

    /**
     * @return array|mixed|\think\response\Json
     * 将所有属性对应值存入cache
     */
    public function SelectAttrText(){
        try {
            if (!Cache::has('attr_arr')) {
                $whereAttr[] = ['id', '<>', '0'];
                $AttrArrs = $this->where($whereAttr)->select();
                $AttrArr = [];
                foreach ($AttrArrs as $key => $v) {
                    //通过
                    $wheresLink[] = ['attr_id', '=', $v['id']];
                    $text_id = $this->table(ATTR_LINK)->where($wheresLink)->column('text_id');
                    $wheresText[] = ['id', 'in', implode(',', $text_id)];
                    $text_arr = $this->table(ATTR_TEXT)->where($wheresText)->field('*')->select();
                    foreach ($text_arr as $keys=>$vv){
                        $AttrArr[$v['id']]['text'][$vv['id']] = $vv['text_name'];
                    }

                    $AttrArr[$v['id']]['attr_name'] =$v['attr_name'];
                    unset($wheresText);
                    unset($wheresLink);
                }
                Cache::set('attr_arr', $AttrArr, 60 * 60 * 24 * 30);
                return $AttrArr;
            }
            return Cache::get('attr_arr');
//            return $AttrArr;
        }catch (Exception $e){
            return ret($e->getMessage(),1005);
        }
    }

    /**
     * @param $attr_id
     * @return \think\response\Json
     * 根据属性ID查找当前所有属性
     */
    public function AttrTextFind($attr_id){
        if (Cache::has('attr_arr')) {
            $attr_arr = Cache::get('attr_arr');
            $reqData = [];
            foreach ($attr_arr as $key=>$v){
                if ($key == $attr_id){
                    $reqData = $v;
                }
            }
            if (empty($reqData)){
                return ret('属性ID不存在',4001);
            }
            return ret($reqData);
        }else{
            $this->SelectAttrText();
            $this->FindAttrText($attr_id);
        }
    }

    /**
     * @param $value
     * @return \think\response\Json
     * 属性添加
     */
    public function add($value){
        try {
            $this->allowField(true)->save($value);
            Cache::rm('attr_arr');
            $attrModel = new attr();
            $attrModel->SelectAttrText();
            return ret(['attr_id' => $this->id]);
        }catch (Exception $e){
            return ret($e->getMessage(),1005);
        }
    }

    /**
     * @param $goods_id
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 商品属性查找
     */
    public function goodsAttrList($goods_id){
        $AttrArr = [];
        //获取所有属性 属性名 => 属性值
        $attr_text_link = $this->table(ATTR_TEXT_GOODS_LINK)->where('goods_id','=',$goods_id)->select();
        foreach ($attr_text_link as $keys=>$vv){
            $AttrArr[] = [$this->attr_arr[$vv['attr_id']]['attr_name'] => $this->attr_arr[$vv['attr_id']]['text'][$vv['text_id']]];
        }

        return $AttrArr;
    }

}