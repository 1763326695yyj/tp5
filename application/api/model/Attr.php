<?php


namespace app\api\model;


use think\Exception;
use think\facade\Cache;
use think\Model;

class Attr extends Model
{
    protected $table = 'wk_attr';
    public $attr_arr;
    public $table_name = [
        '省' => 'wk_provinces',
        '市' => 'wk_cities',
        '区' => 'wk_areas',
    ];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->attr_arr = Cache::get('attr_arr');
    }

    /**
     * @return array|mixed|\think\response\Json
     * 将所有属性对应值存入cache
     */
    public function SelectAttrText(){
        try {
            if (!Cache::has('attr_arr')) {
                $whereAttr[] = ['id', '<>', '0'];
//                $whereAttr[] = ['state', '=', '1'];
                $AttrArrs = $this->where($whereAttr)->select();
                $AttrArr = [];
                foreach ($AttrArrs as $key => $v) {
                    $wheresLink[] = ['attr_id', '=', $v['id']];
                    $text_id = $this->table(ATTR_LINK)->where($wheresLink)->column('text_id');
                    $wheresText[] = ['id', 'in', implode(',', $text_id)];
                    $text_arr = $this->table(ATTR_TEXT)->where($wheresText)->field('*')->select();
                    foreach ($text_arr as $keys=>$vv){
                        $AttrArr[$v['id']]['text'][$vv['id']] = $vv['text_name'];
                    }

                    $AttrArr[$v['id']]['attr_name'] =$v['attr_name'];
                    $AttrArr[$v['id']]['state'] =$v['state'];
                    unset($wheresText);
                    unset($wheresLink);
                }
                Cache::set('attr_arr', $AttrArr, 60 * 60 * 24 * 30);
                return ['data'=>$AttrArr,'code'=>0];
            }
            return  ['data'=>Cache::get('attr_arr'),'code'=>0];
//            return $AttrArr;
        }catch (Exception $e){
            return ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $attr_id
     * @return \think\response\Json
     * 根据属性ID查找当前所有属性
     */
    public function AttrTextFind($attr_id){
        if (Cache::has('attr_arr')) {
            $attr_arr = Cache::get('attr_arr');
            $reqData = [];
            foreach ($attr_arr as $key=>$v){
                    if ($key == $attr_id) {
                        if ($v['state'] == 2){
                            //关联数据表
                            $ATFData = $this->AttrTableFind($attr_id,$v['state']);
                            if ($ATFData['code'] == 0){
                                $reqData = $ATFData['data'];
                            }else{
                                return  ret($ATFData['data'],$ATFData['code']);
                            }
                        }else{
                            $reqData = $v;
                        }

                    }

            }
            if (empty($reqData)){
                return ['data'=>'属性ID不存在','code'=>4001];
            }
            return ['data'=>$reqData,'code'=>0];
        }else{
            $this->SelectAttrText();
            $this->AttrTextFind($attr_id);
        }
    }

    /**
     * @param $attr_id
     * @param $state
     * @return mixed|\think\response\Json
     * 根据属性ID查找相关数据表数据
     */
    public function AttrTableFind($attr_id,$state){
        if ($state == 2){
            try{
            $whereTable[] = ['attr_id','=',$attr_id];
            $attrTable = $this->table(ATTR_TABLE_LINK)->where($whereTable)->find();
//                return ['data'=>$attrTable,'code'=>0];
            $attrTableArr = $this->table($attrTable['table_name'])->select();
            return ['data'=>$attrTableArr,'code'=>0];
            }catch (Exception $e){
                return ['data'=>$e->getMessage(),'code'=>1005];
            }
        }else{
            return  ['data'=>'参数错误','code'=>1004];
        }
    }

    /**
     * @param $value
     * @return \think\response\Json
     * 属性添加
     */
    public function add($value){
        try {
            if (empty($value['state'])){
                //与text相关
                $value['state'] = 1;
            }

            if ($value['state'] == 2 ) {
                if (empty($this->table_name[$value['table_name'] ?? 0])) {
                    return  ['data'=>'参数错误','code'=>1004];
                }
            }
            $this->allowField(true)->save($value);
            if ($value['state'] == 2 ) {
                    $attrTbaleData = [
                        'attr_id' => $this->id,
                        'table_name' => $this->table_name[$value['table_name']],
                    ];
                $this->table(ATTR_TABLE_LINK)->insert($attrTbaleData);
                }
            Cache::rm('attr_arr');
            $attrModel = new attr();
            $attrModel->SelectAttrText();
            return ['data'=>['attr_id' => $this->id],'code'=>0];
        }catch (Exception $e){
            return ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $goods_id
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 商品属性查找
     */
    public function goodsAttrList($goods_id){
        $AttrArr = [];
        //获取所有属性 属性名 => 属性值
        $attr_text_link = $this->table(ATTR_TEXT_GOODS_LINK)->where('goods_id','=',$goods_id)->select();
        foreach ($attr_text_link as $keys=>$vv){
            $AttrArr[] = [$this->attr_arr[$vv['attr_id']]['attr_name'] => $this->attr_arr[$vv['attr_id']]['text'][$vv['text_id']]];
        }
        return $AttrArr;
    }
}