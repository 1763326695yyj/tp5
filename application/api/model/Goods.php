<?php
namespace app\api\Model;
use think\Db;
use think\Exception;
use think\facade\Cache;
use think\Model;
use think\Validate;
class Goods extends Model
{
    public $rule;
    public $msg;
    public $attrModel;
    public $UnitModel;

    protected $table = 'wk_goods';
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //动态验证规则
        $this->rule = [
            'name' => 'require|max:150',
            'number' => 'require',
            'text_id' => 'require',
            'unit_id' => 'require',
        ];
        //动态验证数组，error_message
        $this->msg = [
            'name.require' => '商品名称必填',
            'name.max'     => '名称最多不能超过150个字符',
            'number.require'     => '商品条码必填',
            'text_id.require' => '属性必填',
            'unit_id.require' => '单位必填',
        ];

        $this->attrModel = new Attr();
        $this->UnitModel = new Unit();
    }

    /**
     * @param string $where
     * @param int $id
     * @param int $del 0 所有商品 1 正常商品
     * @return \think\response\Json
     */
    public function goodsList($where='',$id=0,$del=1)
    {
        try {
            if ($del == 1){
                $wheres[] = ['is_del','=',1];
            }
            $wheres[] = ['id','<>',0];

            if ($id != 0){
                $wheres[] = ['id','in',$id];
            }
                $wherePost = explode('--', $where);
            //where条件拼接
                if (!empty($where)) {
                    for ($i = 0; $i < count($wherePost); $i++) {
                        $whereArr = explode('|', $wherePost[$i]);
                        if (count($whereArr) < 3) {
                            return  ['data'=>'参数错误','code'=>1004];
                        }
                        if ($whereArr[1] == 'like') {
                            $whereArr[2] = '%' . $whereArr[2] . '%';
                        }
                        $wheres[] = [$whereArr[0], $whereArr[1], $whereArr[2]];
                    }
                }
                    $GoodArr = Goods::where($wheres)->select();
                    $mass_type = [
                        1 => '月',
                        2 => '天',
                    ];
                    foreach ($GoodArr as $key=>$v){
                        //数据处理
                        $GoodArr[$key]['create_time'] = date('Y-m-d H:i:s',$v['create_time']);
                        $GoodArr[$key]['save_time'] = date('Y-m-d H:i:s',$v['save_time']);
                        $GoodArr[$key]['mass'] = ($v['mass_time']??0).''.($mass_type[$v['mass_type']]??'');
                        $GoodArr[$key]['alarm'] = ($v['alarm_time']??0).''.($mass_type[$v['alarm_type']]??'');
                        //获取所有属性
                        $GoodArr[$key]['attr_info'] = $this->attrModel->goodsAttrList($v['id']);
                        //获取商品单位相关信息
                     $GoodArr[$key]['unit_info'] =   $this->UnitModel->goodsUnitFind($v['id']);
                    }
                     return ['data'=>$GoodArr,'code'=>0];

            }catch (Exception $e){
                return ['data'=>$e->getMessage(),'code'=>1005];
            }


    }


    /**
     * @param $value
     * @return \think\response\Json
     * value 商品添加的数据 二维数组
     */
    public function goodsAdd($value){
            try {
                if (!is_array($value)){
                    return  ['data'=>'参数错误','code'=>1004];
                }
                $ret['error'] = $ret['success'] = 0;
                //循环商品数据

                foreach ($value as $key=>$v) {
                    if (!is_array($v['text_id'])){
                        return  ['data'=>'参数错误','code'=>1004];
                    }
                    $validate   = Validate::make($this->rule,$this->msg);
                        if (!$validate->check($v))
                        {
                            $ret['error']++;
                            $ret['error_msg'][] = $validate->getError();
                            continue;
                        }
                    $goodsData = [
                        'name'=>$v['name']??'未知', 'number' => $v['number']??'00000', 'is_del' => $v['is_del']??1, 'stock'=>$v['stock']??0,
                        'create_time' => time(), 'save_time' => time(), 'mass_time' => $v['mass_time']??0, 'mass_type' => $v['mass_type']??1,
                        'alarm_time' => $v['alarm_time']??0, 'alarm_type' => $v['alarm_type']??1,
                    ];
                    $goodsModel = new Goods;
                    $goodsModel->allowField(true)->save($goodsData);
                    if (!empty($goodsModel->id)){
                        //商品属性关联
                        if ($this->attr_text_goods_link($v['text_id'],$goodsModel->id)){
                            //商品单位关联
                            $unit_bool =  $this->UnitModel->goodsUnitLink($goodsModel->id,$v['unit_id'],$v['change']??'',$v['switch_unit_id']??0,$v['switch_num']??0);
                           if ($unit_bool) {
                               $ret['success']++;
                               $ret['goods_id'][] = $goodsModel->id;
                               continue;
                           }
                        }
                    }
                        $ret['error']++;
                }
                return ['data'=>$ret,'code'=>0];
            }catch (Exception $e){
                return ['data'=>$e->getMessage(),'code'=>1005];
            }

    }

    /**
     * @param $value
     * @return \think\response\Json
     * 商品更新
     */
    public function goodsEdit($value){
        try {
            if (!is_array($value)){
                return  ['data'=>'参数错误','code'=>1004];
            }
            $ret['error'] = $ret['success'] = 0;
            //循环商品数据
            foreach ($value as $key=>$v) {
                if (!is_array($v['text_id'])){
                    return  ['data'=>'参数错误','code'=>1004];
                }
                $validate   = Validate::make($this->rule,$this->msg);
                if (!$validate->check($v))
                {
                    $ret['error']++;
                    $ret['error_msg'][] = $validate->getError();
                    continue;
                }
                if (empty($v['id'])){
                    $ret['error']++;
                    $ret['error_msg'][] = '未找到商品';
                    continue;
                }
                $goodsData = [
                    'name'=>$v['name']??'未知', 'number' => $v['number']??'00000', 'is_del' => $v['is_del']??1, 'stock'=>$v['stock']??0,
                    'save_time'=>time(), 'mass_time' => $v['mass_time']??0, 'mass_type' => $v['mass_type']??1, 'alarm_time' => $v['alarm_time']??0,
                    'alarm_type' => $v['alarm_type']??1,
                ];
                $goodsModel = new Goods;
                if (empty(Goods::get($v['id']))){
                    $ret['error']++;
                    $ret['error_msg'][] = '未找到商品';
                    continue;
                }
               $save_req = $goodsModel->allowField(true)->force()->save($goodsData,['id'=>$v['id']]);
                if ($save_req){
                    //商品属性关联
                    if ($this->attr_text_goods_link($v['text_id'],$v['id'])){
                        //商品单位关联

                        $unit_bool =  $this->UnitModel->goodsUnitLink($v['id'],$v['unit_id'],$v['unit_type']??'',$v['switch_unit_id']??0,$v['switch_num']??0);
                        if ($unit_bool) {
                            $ret['success']++;
                            $ret['goods_id'][] = $v['id'];
                            continue;
                        }
                    }
                }
                    $ret['error']++;
            }
            return ['data'=>$ret,'code'=>0];
        }catch (Exception $e){
            return  ['data'=>'$e->getMessage()','code'=>1005];

        }

//        }
    }

    /**
     * @param $id 商品ID
     * @param $keys 操作的字段
     * @param $value 变化的值
     * @param string $type 变化方式 'dec'-减少  'inc'-增加
     * @param int $force 0-不强制 1-强制
     * @return \think\response\Json
     */
    public function int_change($id,$keys='key',$value,$type='dec',$force=0){

        $goods = Goods::get($id);
        if (empty($goods->$keys)){
            return  ['data'=>'参数错误','code'=>1004];
        }
        $key = $goods->$keys;
        if ($type == 'dec' ){
            $types = $type;
            $int = $key- $value;
        }elseif ( $type == 'inc' ){
            $types = $type;
            $int = $key+ $value;
        }
        if (!empty($goods) && !empty($key) && is_int($key) && is_int($value) && $value>=0 && !empty($types)){
                if ($force == 1) {
                    $goods->$keys = [$type, $value];
                    $goods->save_time = time();
                    $goods->save();
                    return ret(['msg'=>'操作成功','int'=>$int]);
                }else{
                    if ($types == 'dec'){
                        if ( $key-$value < 0 ){
                            return ['data'=>$key.'<'.$value,'code'=>5001];
                        }

                    }
                    $goods->$keys = [$type, $value];
                    $goods->save_time = time();
                    $goods->save();
                    return ['data'=>['msg'=>'操作成功','int'=>$int],'code'=>0];
                }
        }
        return  ['data'=>'参数错误','code'=>1004];


    }


    /**
     * @param array $text_id
     * @param $goods_id
     * @return int|string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException 操作数据库结果
     * 商品属性关联添加(先删除后添加)
     */
    public function attr_text_goods_link($text_id=[],$goods_id){

        $goods_link = [];
            for ($i=0;$i<count($text_id);$i++){
                $ta_link = $this->table(ATTR_LINK)->where('text_id', '=', $text_id[$i])->find();
                $goods_link[] =  [
                    'text_id' => $text_id[$i],
                    'attr_id' => $ta_link->attr_id??0,
                    'goods_id' => $goods_id
                ];
            }
        $whereDel[] = ['goods_id','=',$goods_id];
        $this->table(ATTR_TEXT_GOODS_LINK)->where($whereDel)->delete();
        return $this->table(ATTR_TEXT_GOODS_LINK)->insertAll($goods_link);
    }

}