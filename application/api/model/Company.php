<?php


namespace app\api\model;

//company修改添加重构，全部模型调用从model里调用，方便异常回滚
use think\Db;
use think\Exception;
use think\facade\Cache;
use think\Model;
use think\Validate;

class Company extends Model
{
    public $table = COMPANY;
    public $rule;
    public $msg;
    public $attrModel;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //动态验证规则
        $this->rule = [
            'name' => 'require|max:200',
            'mobile' => ['require','regex'=>'/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\d{8}$/'],
            'address_info' => 'require',
            'cate_num' => 'require',

        ];
        //动态验证数组，error_message
        $this->msg = [
            'name.require' => '公司名称必填',
            'name.max'     => '名称最多不能超过200个字符',
            'mobile.require'     => '手机号码必填',
            'mobile.regex'     => '手机格式不正确',
            'address_info' => '地址必填',
            'cate_num.require' => '证件号必填',
        ];
        $this->attrModel = new Attr();

    }

    /**
     * @param string $where
     * @param string $id
     * @return array
     * 公司列表
     */
    public function companyList($where='',$id=0){
        if ($id != 0){
            $wheres[] = ['id','in',$id];
        }
            $wheres[] = ['id','>',0];
        $wherePost = explode('--', $where);
        //where条件拼接
        if (!empty($where)) {
            for ($i = 0; $i < count($wherePost); $i++) {
                $whereArr = explode('|', $wherePost[$i]);
                if (count($whereArr) < 3) {
                    return  ['data'=>'参数错误','code'=>1004];
                }
                if ($whereArr[1] == 'like') {
                    $whereArr[2] = '%' . $whereArr[2] . '%';
                }
                $wheres[] = [$whereArr[0], $whereArr[1], $whereArr[2]];
            }
        }
        $companyArr = $this->where($wheres)->select();
        foreach ($companyArr as $key=>$v){
            //数据处理
            $companyArr[$key]['create_time'] = date('Y-m-d H:i:s',$v['create_time']);
            $companyArr[$key]['save_time'] = date('Y-m-d H:i:s',$v['save_time']);
            //获取所有属性
            $companyArr[$key]['attr_info'] =  $GoodArr[$key]['attr_info'] = $this->attrModel->AttrList('company_id',$v['id'],COMPANY_ATTR_LINK);
            //获取图片
            $companyArr[$key]['pic_path'] = $this->companyPicFind($v['id']);
        }
        return ['data'=>$companyArr,'code'=>0];
    }
    /**
     * @param $companyData
     * @return array
     * 单公司添加
     */
    public function companyAdd($companyData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($companyData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            } else {
                $data = [
                    'name' => $companyData['name'],
                    'mobile' => $companyData['mobile'],
                    'address_info' => $companyData['address_info'],
                    'cate_num' => $companyData['cate_num'],
                    'create_time' => time(),
                    'save_time' => time(),
                    'is_del' => 1
                ];
                $this->allowField(true)->save($data);
                $this->commit();
                if (!empty($this->id)) {
                    return ['data' => $this->id, 'code' => 0];
                }
            }
        }catch (Exception $e){
            $this->rollback();
            return  ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $companyData
     * @return array
     * 单公司更新
     */
    public function companyEdit($companyData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($companyData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            } else {
                if (empty(Company::get($companyData['id']??0))){
                    return ['data' => '未找到相关信息', 'code' => 1006];
                }
                $data = ['save_time'=>time(),'name' => $companyData['name'], 'mobile' => $companyData['mobile'], 'address_info' => $companyData['address_info'], 'cate_num' => $companyData['cate_num'], 'create_time' => time(), 'save_time' => time(), 'is_del' => 1];
                $this->allowField(true)->save($data,['id'=>$companyData['id']]);
                $this->commit();
                return ['data' => $companyData['id'], 'code' => 0];

            }
        }catch (Exception $e){
            $this->rollback();
            return  ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $attr_info
     * @param $c_id
     * @return array
     * 添加公司-属性关联
     */
    public function companyAttrLink($attr_info,$c_id){
       $this->startTrans();
        try {
            $attr_arr = Cache::get('attr_arr');
            $dataTable = [];
            $dataText = [];
            foreach ($attr_info as $key => $v) {
                if ($attr_arr[$v['attr_id']]['state'] == 2) {
                    //table
                    $dataTable[] = [
                        'attr_id' => $v['attr_id'],
                        'company_id' => $c_id,
                        'table_id' => $v['text_id'],
                    ];
                } elseif ($attr_arr[$v['attr_id']]['state'] == 1) {
                    //text
                    $dataText[] = [
                        'attr_id' => $v['attr_id'],
                        'company_id' => $c_id,
                        'text_id' => $v['text_id'],
                    ];
                }
            }
//            return  ['data'=>$attr_arr,'code'=>0];
            $whereLink[] = ['company_id','=',$c_id];
            $this->table(COMPANY_ATTR_LINK)->where($whereLink)->delete();
            $this->table(COMPANY_ATTR_LINK)->insertAll($dataTable);
            $this->table(COMPANY_ATTR_LINK)->insertAll($dataText);
            $this->commit();
            return ['data'=>'1','code'=>0];
        }catch (\Exception $e){
            $this->rollback();
            return ['data'=>$e->getMessage(),'code'=>1005];
        }

    }

    /**
     * @param $pic_path
     * @param $c_id
     * @return int|string
     * 公司图片添加
     */
    public function companyPicAdd($pic_path,$c_id){
        try {
            $data = [
                'pic_path' => $pic_path,
                'company_id' => $c_id,
                'is_del' => 1,
                'create_time' => time(),
            ];
            $wherePic[] = ['company_id','=',$c_id];
            $this->table(COMPANY_PIC)->where($wherePic)->delete();
            return ['data'=>$this->table(COMPANY_PIC)->insert($data),'code' => 0];
        }catch (Exception $e){
            return  ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $c_id
     * @return array|\PDOStatement|string|Model|null
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function companyPicFind($c_id){
        return $this->table(COMPANY_PIC)->where('company_id','=',$c_id)->find();
    }

    /**
     * @param $id
     * @param $key
     * @param $val
     * @return bool
     * 单字段修改
     */
    public function companySaveOne($id,$key,$val){
      return $this->save([$key=>$val],[$this->pk=>$id]);
    }

    /**
     * @param $c_id
     * @return mixed
     * 根据主键删除数据
     */
    public function companyDel($c_id){
        $compDel = Company::get($c_id);
        return $compDel->delete();
    }
    /**
     * @param $text_id
     * @return string
     * 属性值查找公司（省，市，区等属性）
     */
    public function companyAttrFind($text_id){
        $company_id = implode(',',array_unique($this->table(COMPANY_ATTR_LINK)->column('company_id')));
        for ($i=0;$i<count($text_id);$i++){
            $whereLink[] = ['company_id','>',0];
            $whereLinkOr[] = ['text_id','=',$text_id[$i]];
            $whereLinkOr[] = ['table_id','=',$text_id[$i]];
            if (!empty($goods_id)){
                $whereLink[] = ['company_id','in',$company_id];
            }
//            $aa[] = $this->table(COMPANY_ATTR_LINK)->whereOr($whereLinkOr)->where('company_id','in',$company_id)->fetchSql()->column('company_id');
            $company_id = implode(',',array_unique($this->table(COMPANY_ATTR_LINK)->whereOr($whereLinkOr)->where('company_id','in',$company_id)->column('company_id')));
            unset($whereLink);
            unset($whereLinkOr);

        }
        return $company_id;
    }



}