<?php


namespace app\api\model;


use think\Exception;
use think\facade\Cache;
use think\Model;
use think\Validate;

class Company extends Model
{
    public $table = COMPANY;
    public $rule;
    public $msg;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //动态验证规则
        $this->rule = [
            'name' => 'require|max:200',
            'mobile' => ['require','regex'=>'/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\d{8}$/'],
            'address_info' => 'require',
            'cate_num' => 'require',

        ];
        //动态验证数组，error_message
        $this->msg = [
            'name.require' => '公司名称必填',
            'name.max'     => '名称最多不能超过200个字符',
            'mobile.require'     => '手机号码必填',
            'mobile.regex'     => '手机格式不正确',
            'address_info' => '地址必填',
            'cate_num.require' => '证件号必填',
        ];

    }

    /**
     * @param $companyData
     * @return array
     * 单公司添加
     */
    public function companyAdd($companyData){
        $validate   = Validate::make($this->rule,$this->msg);
        if (!$validate->check($companyData)) {
          return  ['data'=>$validate->getError(),'code'=>0];
        }else{
            $data = [
                'name' => $companyData['name'],
                'mobile' => $companyData['mobile'],
                'address_info' => $companyData['address_info'],
                'cate_num' => $companyData['cate_num'],
                'create_time' => time(),
                'save_time' => time(),
                'is_del' => 1
            ];
            $this->allowField(true)->save($data);
            if (!empty($this->id)){
                return ['data'=>$this->id,'code'=>0];
            }
        }
    }

    /**
     * @param $attr_info
     * @param $c_id
     * @return array
     * 添加公司-属性关联
     */
    public function companyAttrLink($attr_info,$c_id){
        try {
            $attr_arr = Cache::get('attr_arr');
            $data = [];
            foreach ($attr_info as $key => $v) {
                if ($attr_arr[$v['id']]['state'] == 2) {
                    //table
                    $data[] = [
                        'attr_id' => $v['id'],
                        'company_id' => $c_id,
                        'table_id' => $v['text_id'],
                    ];
                } elseif ($attr_arr[$v['id']]['state'] == 1) {
                    //text
                    $data[] = [
                        'attr_id' => $v['id'],
                        'company_id' => $c_id,
                        'text_id' => $v['text_id'],
                    ];
                }
            }
            $whereLink[] = ['company_id','=',$c_id];
            $this->table(COMPANY_ATTR_LINK)->where($whereLink)->delete();
            $req = $this->table(COMPANY_ATTR_LINK)->insertAll($data);
            return ['data'=>$req,'code'=>0];
        }catch (Exception $e){
            return ['data'=>$e->getMessage(),'code'=>1005];
        }

    }

    /**
     * @param $pic_path
     * @param $c_id
     * @return int|string
     * 公司图片添加
     */
    public function companyPicAdd($pic_path,$c_id){
        $data = [
            'pic_path' => $pic_path,
            'company_id' => $c_id,
            'is_del' => 1,
            'create_time' => time(),
        ];
        return $this->table(COMPANY_PIC)->insert($data);
    }

    /**
     * @param $id
     * @param $key
     * @param $val
     * @return bool
     * 单字段修改
     */
    public function companySaveOne($id,$key,$val){
      return $this->save([$key=>$val],[$this->pk=>$id]);
    }

    /**
     * @param $c_id
     * @return mixed
     * 根据主键删除数据
     */
    public function companyDel($c_id){
        $compDel = Company::get($c_id);
        return $compDel->delete();
    }

}