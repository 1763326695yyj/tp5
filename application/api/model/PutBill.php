<?php


namespace app\api\model;


use think\Exception;
use think\Model;
use think\Validate;

class PutBill extends Model
{
    public $table = PUT_BILL;
    public $rule;
    public $msg;
    public $state;
    public $bill_type;
    public $house_type;
    public $receipt_type;
    public $pay_type;
    public $goodsModel;
    public $companyModel;
    public $houseModel;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //动态验证规则
        $this->rule = [
            'bill_type' => 'require',
//            'mobile' => ['require','regex'=>'/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\d{8}$/'],
            'total' => 'require|float',
            'pay_type' => 'require',
            'goods_info' => 'require|array',
            'company_info' => 'require',

        ];
        //动态验证数组，error_message
        $this->msg = [
            'bill_type.require' => '类型必填',
            'total.require'     => '总价必填',
            'total.float'     => '价格输入有误',
            'pay_type.require'     => '付款状态必填',
            'goods_info.require'     => '商品信息必填',
            'goods_info.array'     => '商品信息格式错误',
            'company_info.require'     => '公司信息必填',
            'company_info.array'     => '公司信息格式错误',
        ];
        $this->state = [
            1 => '购入',
            2 => '退回',
            3 => '调库',
        ];
        $this->pay_type = [
            1 => '已付款',
            2 => '未付款',
        ];
        $this->receipt_type = [
            1 => '带票',
            2 => '无发票',
        ];
        $this->house_type = [
            1 => '单仓库',
            2 => '多仓库',
        ];
        $this->bill_type = [
          1 => '入库订单',
          2 => '入库单',
        ];
        $this->goodsModel = new Goods();
        $this->companyModel = new Company();
        $this->houseModel = new House();
    }

    /**
     * @param $id
     * @param $bill_sn
     * @param $bill_type
     * @param int $start_time
     * @param int $end_time
     * @param string $is_del
     * @return array|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function putList($id,$bill_sn,$bill_type,$start_time=0,$end_time=0,$is_del='0,1'){
        try {
            $wheres[] = ['is_del', 'in', $is_del];
            if (!empty($id)) $wheres[] = ['id', 'in', $id];
            if (!empty($bill_sn)) $wheres[] = ['bill_sn', 'like', "%" . $bill_sn . "%"];
            if (!empty($bill_type)) $wheres[] = ['bill_type', '=', $bill_type];
            if (!empty($start_time)) $wheres[] = ['create_time', '>=', strtotime($start_time)];
            if (!empty($end_time)) $wheres[] = ['create_time', '<=', strtotime($end_time)];
            $put_arr = $this->where($wheres)->select();
            foreach ($put_arr as $key => $vp) {
                //数据处理
                $put_arr[$key]['create_time'] = date('Y-m-d H:i:s', $vp['create_time']);
                $put_arr[$key]['save_time'] = date('Y-m-d H:i:s', $vp['save_time']);
                $put_arr[$key]['state_n'] = $this->state[$vp['state']] ?? '';
                $put_arr[$key]['bill_type_n'] = $this->bill_type[$vp['bill_type']] ?? '';
                $put_arr[$key]['house_type_n'] = $this->house_type[$vp['house_type']] ?? '';
                $put_arr[$key]['pay_type_n'] = $this->pay_type[$vp['pay_type']] ?? '';
                $put_arr[$key]['receipt_type_n'] = $this->receipt_type[$vp['receipt_type']] ?? '';
                $put_arr[$key]['goods_info'] = $this->putGoodsFind($vp['id']);
                $put_arr[$key]['company_info'] = $this->putCompanyFind($vp['id']);
//                if ($vp['pay_type'] == 1) {
//                    $put_arr[$key]['pay_info'] = $this->putPayFind($vp['id']);
//                }

            }
            return ['data' => $put_arr, 'code' => 0];
        }catch (Exception $e){
            return ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    //传参格式
    //{"putData":{"id":1,"bill_type":2,"total":101.00,"pay_type":1,"goods_info":[{"id":2,"name":1},{"id":2,"name":"哈哈","num":3,"house_info":{"house_id":1,"house_name":"测试1仓库"}}],"company_info":{"id":2,"name":"测试公司2"},"attr_info":[{"attr_id":11,"text_id":8},{"attr_id":14,"text_id":62},{"attr_id":"15","text_id":643},{"attr_id":7,"text_id":16}],"image_url":"http://wwww.baidu.co2m"},"type":"update"}
    /**
     * @param $putData
     * @return array
     * @throws \think\exception\PDOException
     * 新增入库单（订单）
     */
    public function putAdd($putData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($putData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            } else {
                $data = [
                    'bill_sn' => 'RK'.rand(1,9).time().rand(1000,9999),
                    'bill_type' => $putData['bill_type'],
                    'total' => $putData['total'],
                    'house_type' => $putData['house_type']??1,
                    'pay_type' => $putData['pay_type'],
                    'receipt_type' => $putData['receipt_type']??2,
                    'match_sn' => $putData['match_sn']??'',
                    'state' => $this->state[$putData['state']??0]??1,
                    'create_time' => time(),
                    'save_time' => time(),
                    'is_del' => $putData['is_del']??1,
                    'is_bad' => 1,
                    'cash_paid' => $putData['cash_paid']??0.00,
                    'use_refunds' => $putData['use_refunds']??0.00,
                    'account_balance' => $putData['account_balance']??0.00,
                    'charge_balance' => $putData['charge_balance']??0.00,
                ];

                    $this->allowField(true)->save($data);

                if (!empty($this->id)) {
                    //商品关联 1对多
                    $pglink_data =  $this->putGoodsLink($this->id,$putData['goods_info']);
                    //供应商关联 1对1
                   $pclink_data =  $this->putCompanyLink($this->id,$putData['company_info']);
                    if ($pglink_data['code'] == 0 ){
                      if ($pclink_data['code'] == 0) {
                          $this->commit();
                          return ['data' => $this->id, 'code' => 0];
                      }else{
                          return $pclink_data;
                      }
                    }else{
                        return $pglink_data;
                    }

                }

            }
        }catch (Exception $e){
            $this->rollback();
            return  ['data'=>$e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $putData
     * @return array
     * @throws \think\exception\PDOException
     * 更新入库单（订单）
     */
    public function putEdit($putData){
        $this->startTrans();
        try {
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($putData)) {
                return ['data' => $validate->getError(), 'code' => 1006];
            } else {
                $data = [
                    'bill_type' => $putData['bill_type'],
                    'total' => $putData['total'],
                    'house_type' => $putData['house_type']??1,
                    'pay_type' => $putData['pay_type'],
                    'receipt_type' => $putData['receipt_type']??2,
                    'match_sn' => $putData['match_sn']??'',
                    'state' => $this->state[$putData['state']??0]??'',
                    'save_time' => time(),
                    'is_del' => $putData['is_del']??1,
                    'is_bad' => 1,
                    'id' => $putData['id']??0,
                    'cash_paid' => $putData['cash_paid']??0.00,
                    'use_refunds' => $putData['use_refunds']??0.00,
                    'account_balance' => $putData['account_balance']??0.00,
                    'charge_balance' => $putData['charge_balance']??0.00,
                ];
                if (empty(PutBill::get($data['id']))){
                    return ['data' => '参数错误', 'code' => 1004];
                }
                $this->allowField(true)->save($data,['id'=>$data['id']]);
                    //商品关联 1对多
                    $pglink_data =  $this->putGoodsLink($data['id'],$putData['goods_info']);
                    //供应商关联 1对1
                    $pclink_data =  $this->putCompanyLink($data['id'],$putData['company_info']);
                    if ($pglink_data['code'] == 0 ){
                        if ($pclink_data['code'] == 0) {
                            $this->commit();
                            return ['data' => $this->id, 'code' => 0];
                        }else{
                            return $pclink_data;
                        }
                    }else{
                        return $pglink_data;
                    }
            }
        }catch (Exception $e){
            $this->rollback();
            return  ['data'=>$e->getMessage(),'code'=>1005];
        }
    }
    /**
     * @param $put_id
     * @param $goods_info
     * @return array
     * 入库-商品关联
     */
    public function putGoodsLink($put_id,$goods_info){
        try{
            $data = [];
            $putbill = PutBill::get($put_id);
            foreach ($goods_info as $key=>$vg){
                if (empty($vg['id'])){
                    continue;
                }
                $houseGoods = $this->houseModel->goodsPleceAdd($vg['id'],$vg['house_info']['house_id'],$putbill['bill_sn'],$vg['house_info']['house_num']??'',$vg['house_info']['house_row']??'',$vg['house_info']['house_col']??'');
                if ($houseGoods['code'] != 0){
                    return $houseGoods;
                    continue;
                }
                $data[] = [
                    'put_id' => $put_id,
                    'goods_id' => $vg['id'],
                    'goods_info' => json_encode($this->goodsModel->goodsList('',$vg['id'])['data'],JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES),
                    'num' => $vg['num']??0,
                    'house_id' => $vg['house_info']['house_id'],
                    'house_info' => json_encode($this->houseModel->houseList('',$vg['house_info']['house_id'],2)??'',JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES)??'',
                    'price' => $vg['price']??0.00,
                ];

            }

//            return ['data' => $data, 'code' => 1005];
            $whereLinkDel[] = ['put_id','=',$put_id];
            $this->table(PUT_GOODS_LINK)->where($whereLinkDel)->delete();
            $req =  $this->table(PUT_GOODS_LINK)->insertAll($data);
            if (!empty($req)) {
                return ['data' => '操作成功', 'code' => 0];
            }else{
                return ['data' => '参数错误', 'code' => 1004];
            }
        }catch (Exception $e){
            return ['data' => $e->getMessage(),'code'=>1005];
        }
    }

    /**
     * @param $put_id
     * @param $company_info
     * @return array
     * 入库-供应商关联
     */
    public function putCompanyLink($put_id,$company_info){
        try {
            if (empty($company_info['id'])) {
                return ['data' => '参数错误', 'code' => 1004];
            }
            $data = [
                'put_id' => $put_id,
                'company_id' => $company_info['id'],
                'company_info' => json_encode($this->companyModel->companyList('',$company_info['id']), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES),
            ];
            $whereLinkDel[] = ['put_id','=',$put_id];
            $this->table(PUT_COMPANY_LINK)->where($whereLinkDel)->delete();
            $req = $this->table(PUT_COMPANY_LINK)->insert($data);
            if (!empty($req)) {
                return ['data' => '操作成功', 'code' => 0];
            } else {
                return ['data' => '参数错误', 'code' => 1004];
            }
        }catch (Exception $e){
            return ['data'=>$e->getMessage(),'code'=>1005];
        }

    }

    public function putGoodsFind($put_id){
        $whereFind[] = ['put_id','=',$put_id];
        $goods_info = $this->table(PUT_GOODS_LINK)->where($whereFind)->select();
        foreach ($goods_info as $key=>$v){
            $goods_info[$key]['goods_info']   =  json_decode( stripslashes($v['goods_info']),true);
            $goods_info[$key]['house_info']   =  json_decode( stripslashes($v['house_info']),true);
        }
        return $goods_info;
    }

    public function putCompanyFind($put_id){
        $whereFind[] = ['put_id','=',$put_id];
        $company_info = $this->table(PUT_COMPANY_LINK)->where($whereFind)->select();
        foreach ($company_info as $key=>$v){
            $company_info[$key]['company_info']   =  json_decode( stripslashes($v['company_info']),true);

        }
        return $company_info;
    }
}