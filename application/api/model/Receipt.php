<?php


namespace app\api\model;


use think\Exception;

use think\Model;
use think\Validate;

class Receipt extends Model
{
    public $table = RECEIPT;
    public $rule;
    public $msg;
    public $companyModel;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->rule = [
            'out_company_id' => 'require',
            'in_company_id' => 'require',
            'issue_time' => 'require',
            'receipt_sn' => 'require',
            'match_bill_sn' => 'require',
            'state' => 'require|number',
            'receipt_info' => 'require|array'
        ];
        $this->msg = [
            'out_company_id.require' => '开票公司必填',
            'in_company_id.require' => '收票公司必填',
            'issue_time.require' => '开票时间必填',
            'receipt_sn.require' => '发票编号必填',
            'match_bill_sn.require' => '对应单号必填',
            'state.require' => '对应操作必填',
            'state.number' => '对应操作格式不正确',
            'receipt_info.require' => '发票信息必填',
            'receipt_info.array' => '发票信息格式不正确',
        ];
        $this->companyModel = new Company();
    }

    public function receiptList($keyword){
        try {
            $wheres[] = ['id|match_bill_sn', 'like', "%" . $keyword . "%"];
            $receiptArr = $this->where($wheres)->select();
            if (!empty($receiptArr)) {
                foreach ($receiptArr as $key => $v) {
                    $receiptArr[$key]['receipt_info'] = $this->receiptInfoFind($v['id']);
                    $receiptArr[$key]['out_company_info'] = $this->receiptCompanyFind($v['id'], 1);
                    $receiptArr[$key]['in_company_info'] = $this->receiptCompanyFind($v['id'], 2);
                }
            }
            return ['code'=>0,'data'=>$receiptArr];
        }catch (Exception $e){
            return ['code'=>1005,'data'=>$e->getMessage()];
        }
    }

    /**
     * @param $receiptData
     * @return array
     */
    public function receiptAdd($receiptData){
        $this->startTrans();
       try{
           $validate = Validate::make($this->rule, $this->msg);
           if (!$validate->check($receiptData)) {
               return ['code'=>1006,'data' => $validate->getError()];
           }
        $data  = [
            'issue_time' => strtotime($receiptData['issue_time']),
            'receipt_sn' => $receiptData['receipt_sn'],
            'match_bill_sn' => $receiptData['match_bill_sn'],
            'state' => $receiptData['state'],
            'is_del' => 1,
            'create_time' => time(),
            'remark' => $receiptData['remark']??'',
        ];
           $this->allowField(true)->save($data);
           if ($this->id){
               $c1 = $this->receiptCompanyAdd($this->id,$receiptData['out_company_id'],1);  //开票公司
               $c2 = $this->receiptCompanyAdd($this->id,$receiptData['in_company_id'],2); //收票公司
               if ($c1['code'] == 0 && $c2['code'] == 0){
                  $r1 = $this->receiptInfoAdd($this->id,$receiptData['receipt_info']);
                  if ($r1['code'] == 0){
                      $this->commit();
                      return  ['data'=>$this->id,'code'=>0];
                  }else{
                      return  $r1;
                  }
               }else{
                   if ($c1['code'] != 0) return $c1;
                   if ($c2['code'] != 0) return $c2;
               }
           }
       }catch (Exception $e){
           $this->rollback();
           return ['code' => 1005 , 'data' => $e->getMessage()];
       }
    }
    /**
     * @param $receiptData
     * @return array
     */
    public function receiptEdit($receiptData){
        $this->startTrans();
        try{
            $validate = Validate::make($this->rule, $this->msg);
            if (!$validate->check($receiptData)) {
                return ['code'=>1006,'data' => $validate->getError()];
            }
            if ( empty($receiptData['id']) || empty($receipt_one = Receipt::get($receiptData['id'])) ) {
                return ['code'=>1004,'data' =>'参数错误，未找到当前发票'];
            }
            $data  = [
                'match_bill_sn' => $receiptData['match_bill_sn'],
                'state' => $receiptData['state'],
                'remark' => $receiptData['remark']??'',
                'is_del' => $receiptData['is_del']??1,
            ];

           $saveReq =  $this->allowField(true)->save($data,['id'=>$receiptData['id']]);
            if ($saveReq){
//                $c1 = $this->receiptCompanyAdd($receiptData['id'],$receiptData['out_company_id'],1);  //开票公司
//                $c2 = $this->receiptCompanyAdd($receiptData['id'],$receiptData['in_company_id'],2); //收票公司
//                if ($c1['code'] == 0 && $c2['code'] == 0){
                    $r1 = $this->receiptInfoAdd($receiptData['id'],$receiptData['receipt_info']);
                    if ($r1['code'] == 0){
                        $this->commit();
                        return  ['data'=>$receiptData['id'],'code'=>0];
                    }else{
                        return  $r1;
                    }
//                }else{
//                    if ($c1['code'] != 0) return $c1;
//                    if ($c2['code'] != 0) return $c2;
//                }
            }
        }catch (Exception $e){
            $this->rollback();
            return ['code' => 1005 , 'data' => $e->getMessage()];
        }
    }
    /**
     * @param $receipt_id
     * @param $company_id
     * @param $type
     * @return array
     * 发票-供应商添加
     */
    public function receiptCompanyAdd($receipt_id,$company_id,$type){
        try {
           $company_info =  $this->companyModel->companyList('',$company_id)['data'];
           if (empty($company_info)){
               return ['code'=>1004 , 'data'=>'参数错误，供应商不存在'];
           }
            $companyData = [
                'receipt_id' => $receipt_id, 'company_id' => $company_id ,'company_info' => json_encode($company_info,JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES),'type' => $type
            ];
           $req = $this->table(RECEIPT_COMPANY)->insert($companyData);
           if ($req){
               return ['code' => 0 , 'data' => '操作成功'];
           }else{
               return ['code' => 1004 , 'data' => '参数错误,操作失败'];
           }
        }catch (Exception $e){
            return ['code' => 1005 , 'data' => $e->getMessage()];
        }
    }

    /**
     * @param $receipt_id
     * @param $receipt_info
     * @return array
     * 发票信息添加
     */
    public function receiptInfoAdd($receipt_id,$receipt_info){
       try{
           foreach ($receipt_info as $key=>$v) {
               if (!empty($v['server_name']))
               {
                   $data[] = [
                       'receipt_id' => $receipt_id,
                       'server_name' => $v['server_name'],
                       'soecs_num' => $v['soecs_num']??'',
                       'unit' => $v['unit']??'',
                       'num' => $v['num']??0,
                       'price' => $v['price']??0.00,
                       'total' => $v['total']??0.00,
                       'tax_rate' => $v['tax_rate']??'',
                       'tax_val' => $v['tax_val']??'',
                       'tax_total' => $v['tax_total']??0.00
                   ];
               }
           }
           if (empty($data)){
               return  ['code' => 1004 ,'data' => '参数错误，发票信息不完整'];
           }
           $whereDel[] = ['receipt_id','=',$receipt_id];
           $this->table(RECEIPT_INFO)->where($whereDel)->delete();
           $req = $this->table(RECEIPT_INFO)->insertAll($data);
           if ($req) {
               return ['code'=>0,'data'=>'插入成功'];
            }else{
               return  ['code' => 1004 ,'data' => '参数错误，添加失败'];
           }
       }catch (Exception $e){
           return ['code' => 1005, 'data' => $e->getMessage() ];
       }
    }

    /**
     * @param $r_id
     * @param $type
     * @return array|\PDOStatement|string|Model|null
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 发票-供应商查找
     */
    public function receiptCompanyFind($r_id,$type){
        $wheres[] = ['receipt_id','=',$r_id];
        $wheres[] = ['type','=',$type];
        $req = $this->table(RECEIPT_COMPANY)->where($wheres)->find();
        return $req;
    }
    /**
     * @param $r_id
     * @return array|\PDOStatement|string|Model|null
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 发票信息查找
     */
    public function receiptInfoFind($r_id){
        $wheres[] = ['receipt_id','=',$r_id];
        $req = $this->table(RECEIPT_INFO)->where($wheres)->select();
        return $req;
    }

    /**
     * @param $r_id
     * @param $key
     * @param $val
     * @return array
     * 单字段更新
     */
    public function receiptOneEdit($r_id,$key,$val){
        $r_array = [
            'receipt_sn','state','remark','is_del'
        ];
        if (empty(Receipt::get($r_id))){
            return ['code'=>1004,'data' => '参数错误，未找到当前发票'];
        }
        if (in_array($key,$r_array)){
            $this->save([$key=>$val],['id'=>$r_id]);
            return ['code' => 0,'data'=>'操作成功'];
        }else{
            return ['code'=>1004,'data' => '参数错误，当前字段不可修改'];
        }
    }

}